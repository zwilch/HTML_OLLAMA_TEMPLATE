<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Ollama Prompt Sender</title>
<style>
body {
	font-family: Arial, sans-serif;
	margin: 20px auto;
	padding: 20px;
}
think {
	background-color: #f4f4e0;
	color: gray;
/* 	border:solid 1px red; */
}	
        .container {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        .left-column {
            padding-right: 20px;
        }

        .middle-column {
            display: flex;
            flex-direction: column;
            gap: 20px;
            align-items: center;
            padding: 0 20px;
			min-width: 500px;
        }

        .right-column {
            padding-left: 20px;
        }

        .chat-list, #promptList {
            margin-top: 10px;
        }

        .chat-item {
			display:inline-grid;
            cursor: pointer;
            margin-bottom: 10px;
            padding: 8px;
            background-color: #f5f5f5;
            border-radius: 4px;
			border: solid 1px darkgray;
        }
		.chat-item span{padding:2px;}
        .chat-item span.prompt{font-weight:bold;}
		.chat-item:hover {
            background-color: #e9e9e9;
        }

        #chatList {
            margin-top: 10px;
        }

        #modelSelect {
            width: 100%;
            margin-bottom: 20px;
        }

        .prompt-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            width: 100%;
        }

        textarea[type="text"] {
            flex-grow: 1;
            padding: 8px;
            width: 100%;
        }

        button {
            padding: 8px 16px;
            margin: 5px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
        }

        button:hover {
            background-color: #45a049;
        }

	.delete-button {
        margin-left: 8px;
        padding: 4px 8px;
        background-color: #ff4444;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .delete-button:hover {
        background-color: #cc0000;
    }
        .output {
            margin-top: 20px;
            background-color: #fff;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #ccc;
            min-height: 100px;
			width:100%;
			white-space: pre-wrap; 
			word-wrap: break-word;
        }

        #promptQueue {
            margin: 10px 0;
            text-align: center;
        }

        #promptList {
            list-style: none;
            padding: 0;
            width: 100%;
        }
		.button-container {
			display: flex;
			justify-content: space-between;
			align-items: center;
			width: 100%;
			margin-top: 10px;
		}

		#sendButton {
			width: 80%;
		}

		#copyOutputBtn {
			width: auto;
            padding: 4px 10px;
            margin-left: 8px;
            background-color: #2196F3;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        #copyOutputBtn:hover {
            background-color: #1976D2;
        }
        .prompt-item {
            margin-bottom: 10px;
            padding: 8px;
            background-color: #f0f0f0;
            border-radius: 4px;
            text-align: center;
        }

        .status {
            font-size: 0.8em;
            margin-right: 8px;
        }

        .success {
            color: #4CAF50;
        }

        .error {
            color: #f44336;
        }

        .clear-history {
            margin-top: 10px;
        }
		
		.settings-column {
    background-color: #f5f5f5;
    padding: 15px;
    border-radius: 4px;
    margin-bottom: 20px;
}

.setting-row {
    margin-bottom: 10px;
}

.setting-row label {
    display: inline-block;
    text-align: right;
}

.setting-row input {
    padding: 4px;
}
.settings-column select {
    width: 100%;
    padding: 4px;
    margin: 5px 0;
}
.settings-column {
    background-color: #f5f5f5;
    padding: 15px;
    border-radius: 4px;
    margin-bottom: 20px;
    overflow: auto;
}

#categoryInput {
    display: none;
    width: 150px;
    padding: 4px;
    margin-left: 8px;
}

#categorySelect {
    width: 150px;
}

#categorySelect option[value="new"] {
    background-color: #e0e0e0;
    cursor: pointer;
}
.live-update-checkbox {
            margin: 5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
    </style>
</head>
<body>
<h1>Ollama Prompt Sender</h1>
<div class="container">
<div class="left-column">
    <!-- Filter und Sortier-Optionen -->
    <div class="settings-column">
        <select id="filterSelect"></select>
        <div class="setting-row">
            <label><input type="checkbox" id="sortCheckbox"> Sortieren nach Datum/Uhrzeit</label>
            <span id="sortDirection">Aufsteigend</span>
        </div>
    </div>
    <div id="chat-list"></div>
</div>
        
<div class="middle-column">
<input type="text" id="modelFilterInput" placeholder="Filter Modelle...">
<select id="modelSelect">
<!-- Modelle werden hier dynamisch geladen -->
</select>
            
<div class="prompt-container">
 <textarea id="promptInput" cols="60" rows="15" type="text" placeholder="Geben Sie Ihren Prompt ein...">Geben Sie Ihren Prompt ein...</textarea>
 <div class="button-container">
  <button id="sendButton" onclick="addPrompt()">Senden</button>
  <button id="stopButton" onclick="stopPrompt()" disabled>Stoppen</button>
  <input type="checkbox" id="liveUpdateCheckbox" checked  >
  <button id="copyOutputBtn" onclick="copyOutputToInput()">Kopieren</button>
 </div>
</div>
            
<pre class="output" id="output"></pre>
</div>
        
<div class="right-column">
 <div class="settings-column">
 <h3>Kategorie:</h3>
	<div class="setting-row">
        <label>Kategorie:</label>
        <select id="categorySelect">
            <option value="Default">Default</option>
			<option value="new">NEUE Kategorie</option>
        </select>
        <label id="categoryLabel" style="display: none;">Neue Kategorie
			<input type="text" id="categoryInput" value="Default" >
		</label>
	</div>
 <h3>Parameter Einstellungen:</h3>
    <div class="setting-row">
            <label for="temperature">Temperature:</label>
            <input type="number" id="temperature" step="0.1" value="0.7" min="0" max="2">
    </div>
    <div class="setting-row">
            <label for="max_tokens">Max Tokens:</label>
            <input type="number" id="max_tokens" min="64" step="64" value="4096">
    </div>	
 </div>
	
 <h3>Warteschlange:</h3>
 <div id="promptQueue">Warteschlange:</div>
 <ul id="promptList"></ul>
</div>
</div>
<script>
class ChatHistoryDisplay {
constructor(container) {
		this.container = container;
        this.chatList = container;  // Changed from querySelector
        this.historyData = [];
        this.modelSelect = document.getElementById('modelSelect');
        this.sortCheckbox = document.getElementById('sortCheckbox');
        this.sortSelect = document.getElementById('sortSelect');
		

    }

initSortCheckbox() {
    const sortCheckbox = document.getElementById('sortCheckbox');
    const sortDirection = document.getElementById('sortDirection');

    if (!sortCheckbox || !sortDirection) return;

    sortCheckbox.addEventListener('change', function(e) {
        console.log("change");
        this.sortDirection = e.target.checked ? 'desc' : 'asc';
        sortDirection.textContent = e.target.checked ? 'Absteigend' : 'Aufsteigend';
        this.render();
    }.bind(this));
}

getUniqueModels() {
	return [...new Set(this.historyData.map(entry => entry.model))];
}

load() {

    const history = JSON.parse(localStorage.getItem('chatHistory')) || [];
//	console.log("load()", history);
    this.historyData = history.map(entry => ({
        id: entry.id,
        date: new Date(entry.id),
        model: entry.model,
        prompt: entry.prompt,
        response: entry.response,
        temperature: entry.temperature,
        max_tokens: entry.max_tokens,
		category: entry.category,
    }));
    
    // Initialisiere das Filter-Select, wenn noch nicht geschehen
 	this.initFilterSelect();
	this.updateCategorySelect();
	this.initSortCheckbox();
    this.render();
}

getChatHistory() {
        try {
            const history = localStorage.getItem('chatHistory');
            return history ? JSON.parse(history) : [];
        } catch (error) {
            console.error('Fehler beim Parsen der Chat-History:', error);
            localStorage.removeItem('chatHistory');
            return [];
        }
    }
getUniqueCategories() {
        const categories = this.historyData.map(entry => entry.category).filter((category) => category !== undefined);
        return [...new Set(categories)];
    }

applyFilter(chatHistory) {

	const isValueInOptgroup = ( (selectElement, selectedValue, targetOptgroupLabel) => {
    // Iteriere über jede Optgroup im Dropdown
    for (let i = 0; i < selectElement.optgroups.length; i++) {
        const optgroup = selectElement.optgroups[i];
        // Überprüfe, ob das aktuelle Optgroup das Ziel-Optgroup ist
        if (optgroup.label === targetOptgroupLabel) {
            // Iteriere über jede Option in der Optgroup
            for (let j = 0; j < optgroup.options.length; j++) {
                const option = optgroup.options[j];
                // Überprüfe, ob die Option den ausgewählten Wert hat
                if (option.value === selectedValue) {
                    return true;
                }
            }
        }
    }
    return false;
	});


	const modelFilter = document.getElementById('modelFilter');
    if (!modelFilter) return chatHistory;

    const selectedModel = modelFilter.value;
    if (selectedModel === 'all') return chatHistory;
	
	console.log("################",modelFilter.optgroups[0].length);

	if( isValueinOptgroup(modelFilter,modelFilter.value,"Kategorie")){
	return chatHistory.filter(entry => entry.category === selectedModel);
	} else {
    return chatHistory.filter(entry => entry.model === selectedModel);
    }
}

applySort(entries) {
    if (!this.sortCheckbox) return entries;
    
    return entries.sort((a, b) => {
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        
        return this.sortDirection === 'asc' 
            ? dateA.getTime() - dateB.getTime() 
            : dateB.getTime() - dateA.getTime();
    });
}

initFilterSelect() {
    if (this.filterSelect) return;
    //console.log("initFilterSelect");
    const filterSelect = document.getElementById('filterSelect');
	filterSelect.innerHTML="";
    // 'Alles anzeigen' Option
    const allOptionsGroup = document.createElement('optgroup');
    allOptionsGroup.label = 'Alles anzeigen';
    const allOption = document.createElement('option');
    allOption.value = 'all';
    allOption.textContent = 'Alles anzeigen';
    allOption.selected = true;
    allOptionsGroup.appendChild(allOption);
    filterSelect.appendChild(allOptionsGroup);

    // Modell-Optionen hinzufügen
    const uniqueModels = this.getUniqueModels();
	const modelGroup = document.createElement('optgroup');
    modelGroup.label = "Modelle";
    uniqueModels.forEach(model => {
        const option = document.createElement('option');
        option.value = model;
        const count = this.historyData.filter(entry => entry.model === model).length;
        option.textContent = `${model} (${count})`;
        modelGroup.appendChild(option);        
    });
	filterSelect.appendChild(modelGroup);
	
    // Kategorie-Optionen hinzufügen
    const categoryOptions = document.createElement('optgroup');
    categoryOptions.label = 'Kategorie';
    const uniqueCategories = this.getUniqueCategories();  // Hier wurde die Änderung vorgenommen
    uniqueCategories.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        const count = this.historyData.filter(entry => entry.category === category).length;
        option.textContent = `${category} (${count})`;
        categoryOptions.appendChild(option);
    });
    filterSelect.appendChild(categoryOptions);

    filterSelect.addEventListener('change', (e) => {
        //console.log("change filterSelect");
        this.filterValue = e.target.value;
        this.render();
    });
    
    filterSelect.value = 'all';
}

getUniqueModels() {
        const models = this.historyData.map(entry => entry.model).filter((model) => model !== undefined);
        return [...new Set(models)];
    }

createChatItem(entry) {
 const chatItem = document.createElement('div');
 chatItem.className = 'chat-item';

    const dateSpan = document.createElement('span');
    dateSpan.className = 'date';
    // Korrekte Datumsformatierung
    const date = new Date(entry.date);
    dateSpan.textContent = date.toLocaleDateString('de-DE', { 
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
/* 		const categorySpan = document.createElement('span');
		categorySpan.className = 'category';
		categorySpan.textContent = `Kategorie: ${entry.category}`;
*/
const categorySelect = document.createElement('select');
    categorySelect.className = 'category-select';
    categorySelect.onchange = (e) => this.updateCategory(entry.id, e.target.value);
const categoryOptions = this.getUniqueCategories().filter(cat => cat !== 'new').concat(['new']);
    categoryOptions.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        if (category === entry.category) {
            option.selected = true;
        }
        categorySelect.appendChild(option);
    });	

        const modelSpan = document.createElement('span');
        modelSpan.className = 'model';
        modelSpan.textContent = entry.model;

        const temperatureSpan = document.createElement('span');
        temperatureSpan.className = 'setting temperature';
        temperatureSpan.textContent = `Temp: ${entry.temperature !== undefined ? entry.temperature : 'N/A'}`;

        const maxTokensSpan = document.createElement('span');
        maxTokensSpan.className = 'setting tokens';
        maxTokensSpan.textContent = `Tokens: ${entry.max_tokens !== undefined ? entry.max_tokens : 'N/A'}`;

        const promptSpan = document.createElement('span');
        promptSpan.className = 'prompt';
        promptSpan.innerHTML = entry.prompt.substring(0,100)+"<br>...<br>"+entry.response.substring(entry.response.length-50);

        const deleteButton = document.createElement('button');
        deleteButton.className = 'delete-button';
        deleteButton.textContent = 'Löschen';
        deleteButton.addEventListener('click', () => this.removeEntry(entry.id));

        chatItem.appendChild(dateSpan);
		chatItem.appendChild(categorySelect);
        chatItem.appendChild(modelSpan);
        chatItem.appendChild(temperatureSpan);
        chatItem.appendChild(maxTokensSpan);
        chatItem.appendChild(promptSpan);
        chatItem.appendChild(deleteButton);

        return chatItem;
    }

updateCategory(entryId, newCategory) {
    const history = JSON.parse(localStorage.getItem('chatHistory')) || [];
    const updatedEntry = history.find(entry => entry.id === entryId);
    if (updatedEntry) {
        updatedEntry.category = newCategory;
        localStorage.setItem('chatHistory', JSON.stringify(history));
        this.load(); // Reload die Chat History nach der Änderung
    }
}
render() {
//    console.log("render()");
    let filteredEntries = this.historyData;
	
	const isValueInOptgroup = function(selectElement, selectedValue, targetOptgroupLabel) {
    // Iteriere über die Kindelemente des select-Elements
    for (let i = 0; i < selectElement.children.length; i++) {
        const optgroup = selectElement.children[i];
        // Überprüfe, ob das Kindelement ein optgroup ist und das gewünschte Label hat
        if (optgroup.tagName === 'OPTGROUP' && optgroup.label === targetOptgroupLabel) {
            // Iteriere über die Optionen innerhalb des optgroup
            for (let j = 0; j < optgroup.children.length; j++) {
                const option = optgroup.children[j];
                // Überprüfe, ob die Option den ausgewählten Wert hat
                if (option.value === selectedValue) {
                    return true;
                }
            }
        }
    }
    return false;
};
	const modelFilter = document.getElementById('filterSelect');
	//console.log(modelFilter);
    // Filter anwenden, falls vorhanden
    if (this.filterValue && this.filterValue !== 'all') {
		if(isValueInOptgroup(
			document.getElementById('filterSelect'),
			document.getElementById('filterSelect').value,
			"Kategorie")
		){
			filteredEntries = this.historyData.filter(entry => entry.category === this.filterValue);
		}else{
			filteredEntries = this.historyData.filter(entry => entry.model === this.filterValue);
		}
    }

    // Sortieren anwenden
    filteredEntries = this.applySort(filteredEntries);

    //console.log("filteredEntries", filteredEntries);
    this.chatList.innerHTML = ''; // Clear existing entries
    this.displayEntries(filteredEntries);
}
	
displayEntries(entries) {
			

			entries.forEach(entry => {
				const chatItem = this.createChatItem(entry);
				this.addEventListeners(chatItem, entry);
				this.chatList.appendChild(chatItem);
			});
	}

updateCategorySelect() {
        const categories = this.getUniqueCategories();
        const categorySelect = document.getElementById('categorySelect');

        // "Default" und "new" müssen immer vorhanden sein
        if (!categories.includes('Default')) {
            categories.push('Default');
        }
        if (!categories.includes('new')) {
            categories.push('new');
        }

        // Dropdown leeren
        categorySelect.innerHTML = '<option value="Default">Default</option><option value="new">NEUE Kategorie</option>';

        // Unique Kategorien hinzufügen
        categories.filter(cat => cat !== 'Default' && cat !== 'new').forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categorySelect.appendChild(option);
        });
}	

addEventListeners(chatItem, entry) {
        // Mouseover Event
        chatItem.addEventListener('mouseover', () => {
            chatItem.style.backgroundColor = '#f0f0f0';
        });

        // Mouseout Event
        chatItem.addEventListener('mouseout', () => {
            chatItem.style.backgroundColor = 'white';
        });

        // Click Event
        chatItem.addEventListener('click', (e) => {
            if (e.target.classList.contains('delete-button')) return;

            // Hole die UI-Elemente
            const modelSelect = document.getElementById('modelSelect');
            const promptInput = document.getElementById('promptInput');
            const outputDiv = document.getElementById('output');
            const temperatureInput = document.getElementById('temperature');
            const maxTokensInput = document.getElementById('max_tokens');

            // Setze die Werte
            modelSelect.value = entry.model;
            promptInput.value = entry.prompt;
            outputDiv.innerHTML = entry.response;
            temperatureInput.value = entry.temperature;
            maxTokensInput.value = entry.max_tokens;
        });
    }

removeEntry(entryId) {
        const newHistory = this.getChatHistory().filter(entry => entry.id !== entryId);
        localStorage.setItem('chatHistory', JSON.stringify(newHistory));
        this.load(); //_reload the history after deletion
    }
}

let isProcessing = false;
let promptsArray = [];
let chatDisplay = null;
const abortController = new AbortController();
       
window.onload = function() {
 fetch('http://localhost:11434/api/tags')
	.then(response => response.json())
    .then(data => populateModelSelect(data))
    .catch(error => console.error('Fehler beim laden der Modelle:', error));

	// Get the container element (e.g., the chatList div)
    const chatListContainer = document.getElementById('chat-list');
	// Create ChatHistoryDisplay instance with the container
    chatDisplay = new ChatHistoryDisplay(chatListContainer);
	chatDisplay.load();
	// Event-Listener für das Kategorie-Dropdown
    document.getElementById('categorySelect').addEventListener('change', () => {
        toggleCategoryInput();
	});
	document.getElementById('liveUpdateCheckbox').addEventListener('change', toggleLiveUpdate);
    // Initialen Status des Kategorie-Inputs setzen
    toggleCategoryInput();
	
	// Initialisierung der Prompts-Queue aus dem localStorage
	promptsArray = JSON.parse(localStorage.getItem('promptsQueue')) || [];
	console.log("promptsArray",promptsArray);
};
function toggleCategoryInput() {
    const categorySelect = document.getElementById('categorySelect');
    const categoryInput  = document.getElementById('categoryInput');
	const categoryLabel  = document.getElementById('categoryLabel');
    const selectedValue = categorySelect.value;
    
    if (selectedValue === 'new') {
        categoryLabel.style.display = 'inline-block';
        categoryInput.style.display = 'inline-block';
		categoryInput.value = 'Default';
        categoryInput.focus();
    } else {
        categoryLabel.style.display = 'none';
		categoryInput.style.display = 'none';
    }
}
function toggleLiveUpdate() {

        const isLiveUpdating = document.getElementById('liveUpdateCheckbox').checked;
        document.getElementById('output').innerHTML = isLiveUpdating ? 'Aktualisieren...' : 'Aktualisierung angehalten';
		
		console.log("toggleLiveUpdate()",document.getElementById('liveUpdateCheckbox').checked);
    }
function toggleProcessingState(enabled) {
    
    const stopButton = document.getElementById('stopButton');
    
    
    stopButton.disabled = !enabled;
}
function generateId() {
return Date.now().toString();
}
function populateModelSelect(models) {
            models = models.models;
            models.sort((a, b) => b.size < a.size);
			// Hole den aktuellen Filter-Wert
            const filterValue = document.getElementById('modelFilterInput').value.toLowerCase();
			            
			const select = document.getElementById('modelSelect');
			select.innerHTML = ''; // Clear existing options
            for (const model in models) {
                if (models.hasOwnProperty(model)) {
				 if(models[model].name.toLowerCase().includes(filterValue)){
                    const option = document.createElement('option');
                    option.value = models[model].name;
                    option.textContent = models[model].name;
                    select.appendChild(option);
                 }// filterValue
				}
            }
            
            if (select.length > 0) {
                select.selectedIndex = 0;
            }
        }
// Speichert die Prompts-Queue im localStorage
function savePromptsQueue() {
    localStorage.setItem('promptsQueue', JSON.stringify(promptsArray));
}
function stopPrompt() {
    if (isProcessing) {
        // Hole den aktiven Request und.abortiere ihn
        if (abortController) {
            abortController.abort();
            const outputDiv = document.getElementById('output');
            outputDiv.innerHTML = 'Aktualisierung abgebrochen';
        }
    }
}
function copyOutputToInput() {
            const outputDiv = document.getElementById('output');
            const promptInput = document.getElementById('promptInput');
            
            const outputContent = outputDiv.textContent;
            promptInput.value = outputContent;
            promptInput.focus();
        }

function addPrompt() {
    const promptInput = document.getElementById('promptInput');
	const temperatureInput = document.getElementById('temperature');
    const maxTokensInput = document.getElementById('max_tokens');
	const categorySelect = document.getElementById('categorySelect');
    const categoryInput = document.getElementById('categoryInput');

	const newPrompt = {
        model: document.getElementById('modelSelect').value,
        prompt: promptInput.value,
        status: 'queued',
        id: generateId(),
		temperature: parseFloat(temperatureInput.value) || 0.7,
        max_tokens: parseInt(maxTokensInput.value) || 4096,
		category: categorySelect.value === 'new' ? categoryInput.value.trim() : categorySelect.value
    };
	if (promptsArray.length === 0) {
        document.getElementById('stopButton').disabled = true;
    }
	promptsArray.push(newPrompt);
	console.log("addPrompt() promptsArray ",promptsArray);
    updateQueueDisplay(promptsArray);  
	sendPrompt();
}

async function sendPrompt() {
    try {
        if (promptsArray.length === 0 || isProcessing) return;

        isProcessing = true;
		toggleProcessingState(true);
        const originalPrompt = promptsArray.shift();

        updatePromptStatus(originalPrompt, 'processing');

        await sendPromptToApi(originalPrompt, abortController);

        isProcessing = false;

        if (promptsArray.length > 0) {
            await sendPrompt();
        }
    } catch (error) {
        console.error('Error:', error);
        const outputDiv = document.getElementById('output');
        outputDiv.innerHTML = `Fehler: ${error.message}`;

        if (promptsArray.length > 0) {
            updatePromptStatus(promptsArray[0], 'error');
        } else {
            updatePromptStatus(originalPrompt, 'error');
        }
    } finally {
        isProcessing = false;
        toggleProcessingState(false);
    }
}

function updatePromptStatus(prompt, status) {
    prompt.status = status;
    updateQueueDisplay([prompt]); // Aktualisiert nur das betreffende Prompt
}

async function sendPromptToApi(prompt,controller) {
    try {
        const response = await fetch('http://localhost:11434/api/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: prompt.model,
                prompt: prompt.prompt,
                temperature: prompt.temperature,
                max_tokens: prompt.max_tokens,
                streaming: true
            }),
			signal: controller.signal 
        });

        await handleStreamingResponse(response, prompt);
    } catch (error) {
        throw error;
    }
}
async function handleStreamingResponse(response, prompt, controller) {
    let result = '';
	const outputDiv = document.getElementById("output");
    const reader = response.body.getReader();

    try {
        while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            const decodedValue = new TextDecoder().decode(value);

            if (decodedValue.includes('Error')) {
                throw new Error(decodedValue);
            }

            try {
                const json = JSON.parse(decodedValue.trim());
                if (json.response !== undefined) {
                    result += json.response;
					//console.log(json.response);
                }
				if (outputDiv && document.getElementById('liveUpdateCheckbox').checked) {
					outputDiv.innerHTML = result;
				}
            } catch (parseError) {
                console.error('Fehler beim Parsen:', parseError);
                break;
            }
        }

        

        saveChatToLocalStorage(
            prompt.model,
            prompt.prompt,
            result,
            prompt.temperature,
            prompt.max_tokens,
            prompt.category,
        );

        updatePromptStatus(prompt, 'processed');
		// Speichere die aktualisierte Warteschlange im localStorage
        savePromptsQueue();
    } catch (error) {
        throw error;
    }
}
function handleError(error, outputDiv) {
    console.error('Error:', error);
    if (outputDiv) {
        outputDiv.innerHTML = `Fehler: ${error.message}`;
    }
    if (promptsArray.length > 0) {
        updatePromptStatus(promptsArray[0], 'error');
    } else {
        updatePromptStatus(promptsArray[0], 'error');
    }
}

function updateQueueDisplay(prompts) {
    const queueList = document.getElementById('promptList');
    queueList.innerHTML = '';

    prompts.forEach(prompt => {
        const div = document.createElement('div');
        div.className = 'prompt-item';
        div.classList.add(prompt.status === 'queued' ? 'queued' : 
                        prompt.status === 'processing' ? 'processing' : 'failed');
        
        let statusBadge = '';
        if (prompt.status === 'queued') {
            statusBadge = '<span class="status">[QUEUED]</span> ';
        } else if (prompt.status === 'processing') {
            statusBadge = '<span class="status">[BEARBEITEN]</span> ';
        } else if (prompt.status === 'processed') {
            statusBadge = '<span class="status success">[ERFOLGTE]</span> ';
        } else {
            statusBadge = '<span class="status error">[FEHLER]</span> ';
        }

        const date = new Date().toLocaleString('de-DE', { 
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });

        let truncatedPrompt = prompt.prompt;
        if (truncatedPrompt.length > 200) {
            truncatedPrompt = truncatedPrompt.substring(0, 200) + '...';
        }

        div.innerHTML = `
            ${statusBadge}
            <span class="date">${date}</span>
            <span class="model">${prompt.model}</span>
            <span class="prompt">${truncatedPrompt}</span>
        `;

        // Delete-Button erstellen und hinzufügen
		if (prompt.status === 'queued') {
        const deleteButton = document.createElement('button');
        deleteButton.className = 'delete-button';
        deleteButton.textContent = 'Löschen';
        deleteButton.onclick = () => deletePromptFromQueue(prompt.id);
        div.appendChild(deleteButton);
		}//if queued
        // Click-Event für die Anzeige der Details
        div.onclick = () => showPromptDetails(prompt);
        queueList.appendChild(div);
    });
}

function deletePromptFromQueue(promptId) {
    promptsArray = promptsArray.filter(prompt => prompt.id !== promptId);
    updateQueueDisplay(promptsArray);
	savePromptsQueue();
}
function showPromptDetails(prompt) {
    const promptInput = document.getElementById('promptInput');
    const outputDiv = document.getElementById('output');
    
    if (prompt) {
        promptInput.value = prompt.prompt;
        outputDiv.innerText = `Modell: ${prompt.model}\nTemperature${prompt.temperatur||.7}\nPrompt: ${prompt.prompt}`;
    }
}

function saveChatToLocalStorage(model, prompt, response, temperature, max_tokens, category) {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
    const newEntry = {
        id: Date.now(),
        date: new Date().toLocaleString('de-DE', { 
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }), // Gibt "DD.MM.YYYY HH:mm" zurück
        model: model,
        prompt: prompt,
        response: response,
		temperature: temperature,
        max_tokens: max_tokens,
		"category": category 
    };
    chatHistory.push(newEntry);
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
	chatDisplay.load();
}


function deleteChatEntry(entryId) {
	console.log("deleteChatEntry",entryId);
    let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
    chatHistory = chatHistory.filter(entry => entry.id !== entryId);
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    displayChatHistory();
}

function clearHistory() { 
            localStorage.removeItem('chatHistory');
            chatHistory = [];
            displayChatHistory();
}

function showChatResponse(entry) {
            const promptInput = document.getElementById('promptInput');
            const outputDiv = document.getElementById('output');
            
            if (entry) {
                promptInput.value = entry.prompt;
                outputDiv.innerHTML = `Antwort:\n${entry.response}`;
            }
        }
    </script>
</body>
</html>
